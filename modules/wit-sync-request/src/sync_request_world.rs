// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod trinity {
    pub mod api {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod sync_request {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum RequestVerb {
                Get,
                Put,
                Delete,
                Post,
            }
            impl ::core::fmt::Debug for RequestVerb {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RequestVerb::Get => f.debug_tuple("RequestVerb::Get").finish(),
                        RequestVerb::Put => f.debug_tuple("RequestVerb::Put").finish(),
                        RequestVerb::Delete => {
                            f.debug_tuple("RequestVerb::Delete").finish()
                        }
                        RequestVerb::Post => f.debug_tuple("RequestVerb::Post").finish(),
                    }
                }
            }
            impl RequestVerb {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> RequestVerb {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => RequestVerb::Get,
                        1 => RequestVerb::Put,
                        2 => RequestVerb::Delete,
                        3 => RequestVerb::Post,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct RequestHeader {
                pub key: _rt::String,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for RequestHeader {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RequestHeader")
                        .field("key", &self.key)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Request {
                pub verb: RequestVerb,
                pub url: _rt::String,
                pub headers: _rt::Vec<RequestHeader>,
                pub body: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("verb", &self.verb)
                        .field("url", &self.url)
                        .field("headers", &self.headers)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResponseStatus {
                Success,
                Error,
            }
            impl ::core::fmt::Debug for ResponseStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResponseStatus::Success => {
                            f.debug_tuple("ResponseStatus::Success").finish()
                        }
                        ResponseStatus::Error => {
                            f.debug_tuple("ResponseStatus::Error").finish()
                        }
                    }
                }
            }
            impl ResponseStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResponseStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResponseStatus::Success,
                        1 => ResponseStatus::Error,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub status: ResponseStatus,
                pub body: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("status", &self.status)
                        .field("body", &self.body)
                        .finish()
                }
            }
            /// An error happened while trying to run a request.
            #[derive(Clone)]
            pub enum RunRequestError {
                /// The builder couldn't be created.
                Builder(_rt::String),
                /// The request couldn't be executed.
                Execute(_rt::String),
            }
            impl ::core::fmt::Debug for RunRequestError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RunRequestError::Builder(e) => {
                            f.debug_tuple("RunRequestError::Builder").field(e).finish()
                        }
                        RunRequestError::Execute(e) => {
                            f.debug_tuple("RunRequestError::Execute").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RunRequestError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RunRequestError {}
            #[allow(unused_unsafe, clippy::all)]
            pub fn run_request(req: &Request) -> Result<Response, RunRequestError> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 5 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 5
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Request {
                        verb: verb0,
                        url: url0,
                        headers: headers0,
                        body: body0,
                    } = req;
                    let vec1 = url0;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let vec5 = headers0;
                    let len5 = vec5.len();
                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec5.len() * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result5 = if layout5.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout5);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec5.into_iter().enumerate() {
                        let base = result5
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        {
                            let RequestHeader { key: key2, value: value2 } = e;
                            let vec3 = key2;
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = value2;
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                        }
                    }
                    let (result7_0, result7_1, result7_2) = match body0 {
                        Some(e) => {
                            let vec6 = e;
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            (1i32, ptr6.cast_mut(), len6)
                        }
                        None => (0i32, ::core::ptr::null_mut(), 0usize),
                    };
                    let ptr8 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "trinity:api/sync-request")]
                    unsafe extern "C" {
                        #[link_name = "run-request"]
                        fn wit_import9(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import9(
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import9(
                            verb0.clone() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result5,
                            len5,
                            result7_0,
                            result7_1,
                            result7_2,
                            ptr8,
                        )
                    };
                    let l10 = i32::from(*ptr8.add(0).cast::<u8>());
                    let result24 = match l10 {
                        0 => {
                            let e = {
                                let l11 = i32::from(
                                    *ptr8.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let l12 = i32::from(
                                    *ptr8
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                Response {
                                    status: ResponseStatus::_lift(l11 as u8),
                                    body: match l12 {
                                        0 => None,
                                        1 => {
                                            let e = {
                                                let l13 = *ptr8
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l14 = *ptr8
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len15 = l14;
                                                let bytes15 = _rt::Vec::from_raw_parts(
                                                    l13.cast(),
                                                    len15,
                                                    len15,
                                                );
                                                _rt::string_lift(bytes15)
                                            };
                                            Some(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    },
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l16 = i32::from(
                                    *ptr8.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                );
                                let v23 = match l16 {
                                    0 => {
                                        let e23 = {
                                            let l17 = *ptr8
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l18 = *ptr8
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len19 = l18;
                                            let bytes19 = _rt::Vec::from_raw_parts(
                                                l17.cast(),
                                                len19,
                                                len19,
                                            );
                                            _rt::string_lift(bytes19)
                                        };
                                        RunRequestError::Builder(e23)
                                    }
                                    n => {
                                        debug_assert_eq!(n, 1, "invalid enum discriminant");
                                        let e23 = {
                                            let l20 = *ptr8
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l21 = *ptr8
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len22 = l21;
                                            let bytes22 = _rt::Vec::from_raw_parts(
                                                l20.cast(),
                                                len22,
                                                len22,
                                            );
                                            _rt::string_lift(bytes22)
                                        };
                                        RunRequestError::Execute(e23)
                                    }
                                };
                                v23
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    if layout5.size() != 0 {
                        _rt::alloc::dealloc(result5.cast(), layout5);
                    }
                    result24
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    extern crate alloc as alloc_crate;
}
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:trinity:api:sync-request-world:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 483] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xda\x02\x01A\x02\x01\
A\x02\x01B\x11\x01m\x04\x03get\x03put\x06delete\x04post\x04\0\x0crequest-verb\x03\
\0\0\x01r\x02\x03keys\x05values\x04\0\x0erequest-header\x03\0\x02\x01p\x03\x01ks\
\x01r\x04\x04verb\x01\x03urls\x07headers\x04\x04body\x05\x04\0\x07request\x03\0\x06\
\x01m\x02\x07success\x05error\x04\0\x0fresponse-status\x03\0\x08\x01r\x02\x06sta\
tus\x09\x04body\x05\x04\0\x08response\x03\0\x0a\x01q\x02\x07builder\x01s\0\x07ex\
ecute\x01s\0\x04\0\x11run-request-error\x03\0\x0c\x01j\x01\x0b\x01\x0d\x01@\x01\x03\
req\x07\0\x0e\x04\0\x0brun-request\x01\x0f\x03\0\x18trinity:api/sync-request\x05\
\0\x04\0\x1etrinity:api/sync-request-world\x04\0\x0b\x18\x01\0\x12sync-request-w\
orld\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.227.1\
\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
