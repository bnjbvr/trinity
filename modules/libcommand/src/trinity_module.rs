// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
//   * pub-export-macro
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod trinity {
        pub mod module {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod messaging {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub struct Message {
                    pub text: _rt::String,
                    pub html: Option<_rt::String>,
                    pub to: _rt::String,
                }
                impl ::core::fmt::Debug for Message {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Message")
                            .field("text", &self.text)
                            .field("html", &self.html)
                            .field("to", &self.to)
                            .finish()
                    }
                }
                pub type Reaction = _rt::String;
                #[derive(Clone)]
                pub enum Action {
                    Respond(Message),
                    React(Reaction),
                }
                impl ::core::fmt::Debug for Action {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Action::Respond(e) => {
                                f.debug_tuple("Action::Respond").field(e).finish()
                            }
                            Action::React(e) => {
                                f.debug_tuple("Action::React").field(e).finish()
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_init_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    T::init(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let base6 = arg1;
                                    let len6 = arg2;
                                    let mut result6 = _rt::Vec::with_capacity(len6);
                                    for i in 0..len6 {
                                        let base = base6
                                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                        let e6 = {
                                            let l0 = *base.add(0).cast::<*mut u8>();
                                            let l1 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len2 = l1;
                                            let bytes2 = _rt::Vec::from_raw_parts(
                                                l0.cast(),
                                                len2,
                                                len2,
                                            );
                                            let l3 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l4 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len5 = l4;
                                            let bytes5 = _rt::Vec::from_raw_parts(
                                                l3.cast(),
                                                len5,
                                                len5,
                                            );
                                            (_rt::string_lift(bytes2), _rt::string_lift(bytes5))
                                        };
                                        result6.push(e6);
                                    }
                                    _rt::cabi_dealloc(
                                        base6,
                                        len6 * (4 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    result6
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_help_cabi<T: Guest>(
                    arg0: i32,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result1 = T::help(
                        match arg0 {
                            0 => None,
                            1 => {
                                let e = {
                                    let len0 = arg2;
                                    let bytes0 = _rt::Vec::from_raw_parts(
                                        arg1.cast(),
                                        len0,
                                        len0,
                                    );
                                    _rt::string_lift(bytes0)
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    );
                    let ptr2 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec3 = (result1.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr2.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_help<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_admin_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let result3 = T::admin(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        _rt::string_lift(bytes2),
                    );
                    let ptr4 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec10 = result3;
                    let len10 = vec10.len();
                    let layout10 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec10.len() * (8 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result10 = if layout10.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout10);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec10.into_iter().enumerate() {
                        let base = result10
                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                Action::Respond(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let Message { text: text5, html: html5, to: to5 } = e;
                                    let vec6 = (text5.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                    match html5 {
                                        Some(e) => {
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec7 = (e.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len7;
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr7.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec8 = (to5.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                Action::React(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                            }
                        }
                    }
                    *ptr4.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len10;
                    *ptr4.add(0).cast::<*mut u8>() = result10;
                    ptr4
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_admin<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l0;
                    let len12 = l1;
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = i32::from(*base.add(0).cast::<u8>());
                            match l2 {
                                0 => {
                                    let l3 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                    }
                                    let l8 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                _ => {
                                    let l10 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (8 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_on_msg_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: *mut u8,
                    arg7: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    let len3 = arg7;
                    let bytes3 = _rt::Vec::from_raw_parts(arg6.cast(), len3, len3);
                    let result4 = T::on_msg(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        _rt::string_lift(bytes2),
                        _rt::string_lift(bytes3),
                    );
                    let ptr5 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec11 = result4;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * (8 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11
                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                Action::Respond(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let Message { text: text6, html: html6, to: to6 } = e;
                                    let vec7 = (text6.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr7.cast_mut();
                                    match html6 {
                                        Some(e) => {
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len8;
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec9 = (to6.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len9;
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr9.cast_mut();
                                }
                                Action::React(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec10 = (e.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr10.cast_mut();
                                }
                            }
                        }
                    }
                    *ptr5.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len11;
                    *ptr5.add(0).cast::<*mut u8>() = result11;
                    ptr5
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_on_msg<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l0;
                    let len12 = l1;
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (8 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = i32::from(*base.add(0).cast::<u8>());
                            match l2 {
                                0 => {
                                    let l3 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                    let l5 = i32::from(
                                        *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l5 {
                                        0 => {}
                                        _ => {
                                            let l6 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l7 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                    }
                                    let l8 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                _ => {
                                    let l10 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (8 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                pub trait Guest {
                    fn init(config: Option<_rt::Vec<(_rt::String, _rt::String)>>) -> ();
                    fn help(topic: Option<_rt::String>) -> _rt::String;
                    fn admin(
                        cmd: _rt::String,
                        author_id: _rt::String,
                        room: _rt::String,
                    ) -> _rt::Vec<Action>;
                    fn on_msg(
                        content: _rt::String,
                        author_id: _rt::String,
                        author_name: _rt::String,
                        room: _rt::String,
                    ) -> _rt::Vec<Action>;
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_trinity_module_messaging_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "trinity:module/messaging#init")] unsafe extern "C" fn
                        export_init(arg0 : i32, arg1 : * mut u8, arg2 : usize,) { unsafe
                        { $($path_to_types)*:: _export_init_cabi::<$ty > (arg0, arg1,
                        arg2) } } #[unsafe (export_name =
                        "trinity:module/messaging#help")] unsafe extern "C" fn
                        export_help(arg0 : i32, arg1 : * mut u8, arg2 : usize,) -> * mut
                        u8 { unsafe { $($path_to_types)*:: _export_help_cabi::<$ty >
                        (arg0, arg1, arg2) } } #[unsafe (export_name =
                        "cabi_post_trinity:module/messaging#help")] unsafe extern "C" fn
                        _post_return_help(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_help::<$ty > (arg0) } }
                        #[unsafe (export_name = "trinity:module/messaging#admin")] unsafe
                        extern "C" fn export_admin(arg0 : * mut u8, arg1 : usize, arg2 :
                        * mut u8, arg3 : usize, arg4 : * mut u8, arg5 : usize,) -> * mut
                        u8 { unsafe { $($path_to_types)*:: _export_admin_cabi::<$ty >
                        (arg0, arg1, arg2, arg3, arg4, arg5) } } #[unsafe (export_name =
                        "cabi_post_trinity:module/messaging#admin")] unsafe extern "C" fn
                        _post_return_admin(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_admin::<$ty > (arg0) } }
                        #[unsafe (export_name = "trinity:module/messaging#on-msg")]
                        unsafe extern "C" fn export_on_msg(arg0 : * mut u8, arg1 : usize,
                        arg2 : * mut u8, arg3 : usize, arg4 : * mut u8, arg5 : usize,
                        arg6 : * mut u8, arg7 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_on_msg_cabi::<$ty > (arg0, arg1,
                        arg2, arg3, arg4, arg5, arg6, arg7) } } #[unsafe (export_name =
                        "cabi_post_trinity:module/messaging#on-msg")] unsafe extern "C"
                        fn _post_return_on_msg(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_on_msg::<$ty > (arg0) } } };
                    };
                }
                #[doc(hidden)]
                pub use __export_trinity_module_messaging_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 2 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 2
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
#[macro_export]
macro_rules! __export_trinity_module_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::trinity::module::messaging::__export_trinity_module_messaging_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::trinity::module::messaging);
        const _ : () = { #[cfg(target_arch = "wasm32")] #[unsafe (link_section =
        "component-type:wit-bindgen:0.41.0:trinity:module:trinity-module:imports and exports")]
        #[doc(hidden)] #[allow(clippy::octal_escapes)] pub static
        __WIT_BINDGEN_COMPONENT_TYPE : [u8; 440] = *
        b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb3\x02\x01A\x02\x01\
A\x02\x01B\x13\x01ks\x01r\x03\x04texts\x04html\0\x02tos\x04\0\x07message\x03\0\x01\
\x01s\x04\0\x08reaction\x03\0\x03\x01q\x02\x07respond\x01\x02\0\x05react\x01\x04\
\0\x04\0\x06action\x03\0\x05\x01o\x02ss\x01p\x07\x01k\x08\x01@\x01\x06config\x09\
\x01\0\x04\0\x04init\x01\x0a\x01@\x01\x05topic\0\0s\x04\0\x04help\x01\x0b\x01p\x06\
\x01@\x03\x03cmds\x09author-ids\x04rooms\0\x0c\x04\0\x05admin\x01\x0d\x01@\x04\x07\
contents\x09author-ids\x0bauthor-names\x04rooms\0\x0c\x04\0\x06on-msg\x01\x0e\x04\
\0\x18trinity:module/messaging\x05\0\x04\0\x1dtrinity:module/trinity-module\x04\0\
\x0b\x14\x01\0\x0etrinity-module\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\
\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
        };
    };
}
#[doc(inline)]
pub use __export_trinity_module_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:trinity:module:trinity-module-with-all-of-its-exports-removed:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 236] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07H\x01A\x02\x01A\0\x04\
\0=trinity:module/trinity-module-with-all-of-its-exports-removed\x04\0\x0b4\x01\0\
.trinity-module-with-all-of-its-exports-removed\x03\0\0\0G\x09producers\x01\x0cp\
rocessed-by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
